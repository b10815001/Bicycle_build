// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel IDWTerrain
#pragma kernel GaussianFilter
#pragma kernel Constraints

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float4> input;
RWTexture2D<float4> Result;
float4 features[1024];
int features_count;
float x;
float z;
float resolution;
int gaussian_m;
RWStructuredBuffer<int> progress;

float getWeight(float d, float w)
{
    float f = pow(d, w);
    if (f < 0.000001)
        return 0.000001;
    return 1 / f;
}

float IDW(float2 xz)
{
    float sum_up = 0.0;
    float sum_down = 0.0;
    for (int i = 0; i < features_count; i++)
    {
        //if (features[i].w > -1)
        //    continue;
        float dist = length(features[i].xz - xz);
        //dist /= 640;
        if (pow(dist, 2) < 1e-6)
            return features[i].y;
        if (dist <= 320.0) // TerrainGenerator.feature_include_length = 320.0f
        {
            /*dist = 320 - dist + 1;
            sum_up += dist * features[i].y*5;
            sum_down += dist*5;*/
            sum_up += getWeight(dist, 3) * features[i].y;
            sum_down += getWeight(dist, 3);
        }
    }
    if (sum_down < 1e-6)
        sum_down = 1e-6;
    return sum_up / sum_down;
}

float4 toHeightmap(float height, float anchor)
{
    int height_int = int(height);
    float height_0 = (height_int / 64) / 64.0;
    float height_1 = (height_int % 64) / 64.0;
    float height_2 = height - height_int;
    return float4(anchor, height_0, height_1, height_2);
}

float decodeHeight(float4 raw)
{
    return raw.g * 64.0 * 64.0 + raw.b * 64.0 + raw.a;
}

// sigma = 10
static const float coeffs[] = {
    0.012318109844189502,
    0.014381474814203989,
    0.016623532195728208,
    0.019024086115486723,
    0.02155484948872149,
    0.02417948052890078,
    0.02685404941667096,
    0.0295279624870386,
    0.03214534135442581,
    0.03464682117793548,
    0.0369716985390341,
    0.039060328279673276,
    0.040856643282313365,
    0.04231065439216247,
    0.043380781642569775,
    0.044035873841196206,
    0.04425662519949865,
    0.044035873841196206,
    0.043380781642569775,
    0.04231065439216247,
    0.040856643282313365,
    0.039060328279673276,
    0.0369716985390341,
    0.03464682117793548,
    0.03214534135442581,
    0.0295279624870386,
    0.02685404941667096,
    0.02417948052890078,
    0.02155484948872149,
    0.019024086115486723,
    0.016623532195728208,
    0.014381474814203989,
    0.012318109844189502
};

RWTexture2D<float4> Constraintsmap;

float4 road_constraints[512];
int road_constraints_count;
float4 building_constraints[1024];
int building_constraints_count;
int building_constraints_points_count[128];

float2 renderConstraints(float2 xz)
{
    if (road_constraints_count < 4)
        return float2(0, 0);

    float v_max = 0;
    float h = 0;
    float dist_min = 1000;
    float4x4 m_matrix = { -0.5,    1, -0.5,   0,
                           1.5, -2.5,    0,   1,
                          -1.5,    2,  0.5,   0,
                           0.5, -0.5,    0,   0 };
    for (int constraints_index = 0; constraints_index < road_constraints_count - 3; constraints_index++)
    {
        for (int i = 0; i < 10; i++)
        {
            float t = i / 10.0;
            float4 t_vector = float4(t * t * t, t * t, t, 1);
            float4x4 g_matrix = { road_constraints[constraints_index].x, road_constraints[constraints_index + 1].x, road_constraints[constraints_index + 2].x, road_constraints[constraints_index + 3].x,
                                  road_constraints[constraints_index].y, road_constraints[constraints_index + 1].y, road_constraints[constraints_index + 2].y, road_constraints[constraints_index + 3].y,
                                  road_constraints[constraints_index].z, road_constraints[constraints_index + 1].z, road_constraints[constraints_index + 2].z, road_constraints[constraints_index + 3].z,
                                                                      1,                                         1,                                         1,                                         1 };
            float4 loc = mul(g_matrix, mul(m_matrix, t_vector));
            float2 bz = float2(loc.x, loc.z);
            float dist = length(bz - xz);
            float v = 1 - (dist - 8.0) / 8.0;
            if (dist < 8.0) // 2 * 8 = road_width * (tex_size / piece_num)
                v = 1;
            else if (dist > 16.0)
                v = 0;
            if (v_max < v)
            {
                v_max = v;
            }
            if (dist_min > dist)
            {
                dist_min = dist;
                h = loc.y;
            }
        }
    }

    //if (building_constraints_count > 0)
    //{
    //    int constraints_index = 0;
    //    for (int building_index = 0; building_index < building_constraints_count; building_index++)
    //    {
    //        /*float2 loc = building_constraints[constraints_index].xz;
    //        float dist = length(loc - xz);
    //        if (dist < 8.0)
    //        {
    //            v_max = 1;
    //        }*/
    //        for (int constraints_points_count_index = 0; constraints_points_count_index < building_constraints_points_count[building_index]; constraints_index++, constraints_points_count_index++)
    //        {
    //            float2 loc = building_constraints[constraints_index].xz;
    //            float dist = length(loc - xz);
    //            if (dist < 8.0)
    //            {
    //                v_max = 1;
    //                if (dist_min > dist)
    //                {
    //                    dist_min = dist;
    //                    h = loc.y;
    //                }
    //            }
    //        }
    //    }
    //}
    return float2(v_max, h);
}

[numthreads(8, 8, 1)]
void IDWTerrain(uint3 id : SV_DispatchThreadID)
{
    //float height = IDW(x + id.x * resolution, z + id.y * resolution) + bias_y; // no-need-passing gaussian filter
    float2 coord = float2(x + id.x * resolution - 16, z + id.y * resolution - 16);
    float height = IDW(coord);
    //float2 road_constraint = renderConstraints(coord); // output: x is dist, y is DEM height
    //float road_constraint = roadConstraint(x + id.x * resolution, z + id.y * resolution);
    //height = (road_constraint.x) * road_constraint.y + (1 - road_constraint.x) * height;
    Result[id.xy] = toHeightmap(height, 0);
    //Constraintsmap[id.xy] = float4(road_constraint.x, 0, 0, 1);
}

[numthreads(8, 8, 1)]
void GaussianFilter(uint3 id : SV_DispatchThreadID)
{
    float sum = 0.0;
    float2 new_coord = id.xy * resolution + float2(gaussian_m, gaussian_m);
    int N = 2 * gaussian_m + 1;
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            float2 tc = new_coord + float2(i - gaussian_m, j - gaussian_m);
            sum += coeffs[i] * coeffs[j] * decodeHeight(input[tc]);
        }
    }
    Result[id.xy] = toHeightmap(sum, input[new_coord].x); //input[new_coord].r
}

[numthreads(8, 8, 1)]
void Constraints(uint3 id : SV_DispatchThreadID)
{
    float2 coord = float2(x + id.x * resolution, z + id.y * resolution);
    float2 road_constraint = renderConstraints(coord); // x is dist, y is DEM height
    float height = decodeHeight(input[id.xy]);
    height = (road_constraint.x) * road_constraint.y + (1 - road_constraint.x) * height;
    Constraintsmap[id.xy] = float4(road_constraint.x, 0, 0, 1);
    Result[id.xy] = toHeightmap(height, road_constraint.x);
    progress[0] = 1;
}